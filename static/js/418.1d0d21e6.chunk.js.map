{"version":3,"file":"static/js/418.1d0d21e6.chunk.js","mappings":"mMAoBaA,EAAmBC,EAAAA,KAAaC,MAAM,CAE/CC,SAAUF,EAAAA,KACLG,IAAI,EAAG,yJACPC,IAAI,GAAI,oJACRC,SAAS,qF,sHCPZC,GAAYC,EAAAA,EAAAA,IAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE7BY,OAAQ,CACJP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,QAgHpC,GAAea,EAAAA,EAAAA,KALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAIiB,CAACE,MAAAA,EAAAA,GAAO7B,iBAAAA,EAAkB8B,cD9IrC,SAAAC,GACzB,IAAIC,EAAS,GAYb,OAXKD,EAAOE,MAIP,2CAA2CC,KAAKH,EAAOE,SAGxDD,EAAOC,MAAQ,0FANfD,EAAOC,MAAQ,4EACfE,QAAQC,IAAIL,IASTC,ICiIX,EA1Gc,SAACK,GACX,IAAMC,EAAU/B,IAGhB,OACI,0BAEI,SAAC,KAAD,CACIuB,cAAeO,EAAMP,cACrB9B,iBAAkBqC,EAAMrC,iBAExBuC,SAAU,SAACR,EAAD,GAAyC,IAA/BS,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAG/B,GAFAJ,EAAMR,MAAME,EAAOE,MAAOF,EAAO5B,SAAU4B,EAAOW,WAAYD,GAC9DD,GAAc,G,UACLH,MAAMV,OACX,OAAO,SAAC,KAAD,CAAUgB,GAAI,cARjC,SAcK,gBACKZ,EADL,EACKA,OACAC,EAFL,EAEKA,OACAY,EAHL,EAGKA,QACAC,EAJL,EAIKA,aACAC,EALL,EAKKA,WACAC,EANL,EAMKA,aANL,EAOKC,aAPL,OAUG,UAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,WACI,SAACC,EAAA,GAAD,KACA,iBAAKC,UAAWf,EAAQ5B,MAAxB,WACI,SAAC4C,EAAA,EAAD,CAAQD,UAAWf,EAAQtB,OAA3B,UACI,SAACuC,EAAA,EAAD,OAEJ,SAACC,EAAA,EAAD,CAAYN,UAAU,KAAKO,QAAQ,KAAnC,sBAGA,kBAAMJ,UAAWf,EAAQhB,KAAMiB,SAAUQ,EAAcW,GAAG,SAA1D,WACI,SAACC,EAAA,EAAD,CACIF,QAAQ,WACRxC,OAAO,SACPX,UAAQ,EACRsD,WAAS,EACTF,GAAG,QACHG,MAAM,gBACNC,KAAK,QACLC,aAAa,QACbC,WAAS,EACTC,SAAUpB,EACVqB,MAAOnC,EAAOE,MACdkC,QAAOnC,EAAOC,MACdmC,WACIpC,EAAOC,OAASW,EAAQX,OAASD,EAAOC,SAEhD,SAAC0B,EAAA,EAAD,CACIF,QAAQ,WACRxC,OAAO,SACPX,UAAQ,EACRsD,WAAS,EACTE,KAAK,WACLD,MAAM,WACNQ,KAAK,WACLX,GAAG,WACHK,aAAa,mBACbE,SAAUpB,EACVyB,OAAQxB,EACRoB,MAAOnC,EAAO5B,SACdiE,WACIpC,EAAO7B,UAAYyC,EAAQzC,UAAY6B,EAAO7B,YAGtD,SAACoE,EAAA,EAAD,CACIC,SAAS,SAACC,EAAA,EAAD,CAAUP,MAAM,WAAWQ,MAAM,YAC1Cb,MAAM,iBAEV,SAACc,EAAA,EAAD,CACIf,WAAS,EACTH,QAAQ,YACRiB,MAAM,UACNrB,UAAWf,EAAQd,OACnB6C,KAAK,SACL/C,KAAK,SANT","sources":["components/Login/Validation.jsx","components/Login/login.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const initialValues = values => {\r\n    let errors = {};\r\n    if (!values.email) {\r\n        errors.email = 'Введите почту';\r\n        console.log(values)\r\n    } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n\r\n    ) {\r\n        errors.email = 'Неверный формат';\r\n\r\n\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n\r\n    password: Yup.string()\r\n        .min(4, \"Должно быть больше 4 символов\")\r\n        .max(12, \"Должно быть меньше 12 сиволов\")\r\n        .required(\"Введите пароль\")\r\n});\r\n","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport {login} from \"../../redux/Reducers/auth-reducer\";\r\nimport {connect} from \"react-redux\"\r\nimport {initialValues, validationSchema} from \"./Validation\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(2, 0, 2),\r\n\r\n\r\n    },\r\n}));\r\n\r\nconst Login = (props) => {\r\n    const classes = useStyles()\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Formik\r\n                initialValues={props.initialValues}\r\n                validationSchema={props.validationSchema}\r\n\r\n                onSubmit={(values, {setSubmitting, setStatus}) => {\r\n                    props.login(values.email, values.password, values.rememberMe, setStatus);\r\n                    setSubmitting(false);\r\n                    if (this.props.isAuth ) {\r\n                        return <Navigate to={'/profile'}/>\r\n                    }\r\n                }}\r\n\r\n\r\n            >\r\n                {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                  }) => (\r\n\r\n                    <Container component=\"main\" maxWidth=\"xs\">\r\n                        <CssBaseline/>\r\n                        <div className={classes.paper}>\r\n                            <Avatar className={classes.avatar}>\r\n                                <LockOutlinedIcon/>\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign in\r\n                            </Typography>\r\n                            <form className={classes.form} onSubmit={handleSubmit} id=\"myForm\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    autoFocus\r\n                                    onChange={handleChange}\r\n                                    value={values.email}\r\n                                    error={errors.email ? true : false}\r\n                                    helperText={\r\n                                        errors.email && touched.email && errors.email}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.password}\r\n                                    helperText={\r\n                                        errors.password && touched.password && errors.password\r\n                                    }\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                                    label=\"Remember me\"\r\n                                />\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.submit}\r\n                                    type=\"submit\"\r\n                                    form=\"myForm\"\r\n\r\n                                >\r\n                                    Sign In\r\n                                </Button>\r\n\r\n                            </form>\r\n                        </div>\r\n\r\n                    </Container>\r\n\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login, validationSchema, initialValues})(Login)\r\n\r\n"],"names":["validationSchema","Yup","shape","password","min","max","required","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","connect","state","isAuth","auth","login","initialValues","values","errors","email","test","console","log","props","classes","onSubmit","setSubmitting","setStatus","rememberMe","to","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Container","component","maxWidth","CssBaseline","className","Avatar","LockOutlined","Typography","variant","id","TextField","fullWidth","label","name","autoComplete","autoFocus","onChange","value","error","helperText","type","onBlur","FormControlLabel","control","Checkbox","color","Button"],"sourceRoot":""}